---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-db-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs
  #mountOptions:              # error "mount.nfs Protocol not supported"
  # - hard
  # - nfsvers=4.1
  claimRef:
    name: nfs-db-pvc          # only allow named PersistentVolumeClaim to bind
    namespace: expresscart
  nfs:
    path: /docker/expressCart/mongodb
    server: nfs.lab

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-db-pvc
  namespace: expresscart
spec:
  storageClassName: nfs                 # Empty string must be explicitly set otherwise default StorageClass will be set
  volumeName: nfs-db-pv                 # bind to fixed PersistentVolume name
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: expresscart
  namespace: expresscart
  labels:
    app: expresscart
spec:
  replicas: 2
  selector:
    matchLabels:
      app: expresscart
  template:
    metadata:
      labels:
        app: expresscart
        role: frontend
    spec:
      # Node.js (Express, MongoDB) application https://github.com/mrvautin/expressCart. Conatienr image builded and pre-imported using ctr command
      containers:
      - name: expresscart
        image: repo.lab/expresscart:1.0.2
        imagePullPolicy: Always
        volumeMounts:
          - name: docker-volume-uploads
            mountPath: /opt/expressCart/public/uploads
          - name: docker-volume-config
            mountPath: /opt/expressCart/config
        ports:
        - containerPort: 1111
      volumes:      
        - name: docker-volume-uploads
          nfs:                                                # Direct using to NFS with using PersistentVolume and PersistentVolumeClaim
            server: nfs.lab                                   # Worker node nfs-common required 
            path: /docker/expressCart/uploads
            readOnly: false
        - name: docker-volume-config
          nfs:
            server: nfs.lab
            path: /docker/expressCart/config
            readOnly: false

---
apiVersion: v1
kind: Service
metadata:
  name: expresscart-service
  namespace: expresscart
spec:
  selector:
    app: expresscart
  ports:
    - protocol: TCP
      port: 1111

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: expresscart
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        role: backend
    spec:
      containers:
      - name: mongodb
        image: docker.io/library/mongo:4.4
        volumeMounts:
        - name: mongodb
          mountPath: "/data/db"
        ports:
        - containerPort: 27017
      volumes:				
        - name: mongodb			
          persistentVolumeClaim:
            claimName: nfs-db-pvc	
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: expresscart
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  namespace: expresscart
  labels:
     app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
       app: mongo-express
  template:
    metadata:
       labels:
         app: mongo-express
         role: monitor
    spec:
       containers:
       - name: mongo-express
         image: mongo-express
         ports:
         - containerPort: 8081
         env:
         - name: ME_CONFIG_MONGODB_URL
           valueFrom:
              configMapKeyRef:
                 name: mongodb-configmap
                 key: database_url
         - name: ME_CONFIG_SITE_BASEURL  
           value: "/mongo"   
         - name: ME_CONFIG_BASICAUTH_USERNAME
           valueFrom:
             secretKeyRef: 
               name: mongoexpress-login
               key: username
         - name: ME_CONFIG_BASICAUTH_PASSWORD
           valueFrom:
             secretKeyRef: 
               name: mongoexpress-login
               key: password

---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
  namespace: expresscart
spec:
  selector:
    app: mongo-express
  ports:
    - protocol: TCP
      port: 8081

---
# Netowrk policy limited the DB communication by frontend and montior Pods
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: allow-db-access-in-namespace
  namespace: expresscart
spec:
  description: "Allow database connect from frontend and monitor role"
  endpointSelector: 
    matchLabels:
      app: mongodb
  ingress:
  - fromEndpoints:
    - matchLabels:
      matchExpressions:
      - {key: role, operator: In, values: [frontend, monitor]}
    toPorts:
    - ports:
      - port: "27017"
        protocol: TCP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernets.io/rewrite-target: /$2
    external-dns.alpha.kubernetes.io/hostname: expresscart.lab
  name: expresscart-ingress
  namespace: expresscart
spec:
  ingressClassName: nginx
  rules:
  - host: expresscart.lab
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: expresscart-service
            port:
              number: 1111
      - path: /mongo(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: mongo-express-service
            port:
              number: 8081

---
apiVersion: v1
kind: Service
metadata:
  name: hubble-ui-ext
  labels:
       role: monitor
  namespace: kube-system
  annotations:
    external-dns.alpha.kubernetes.io/hostname: hubble.lab
spec:
  loadBalancerIP: 192.168.89.100
  type: LoadBalancer
  selector:
    k8s-app: hubble-ui
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8081

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-grafana-ext
  labels:
       role: monitor
  namespace: prometheus-stack
  annotations:
    external-dns.alpha.kubernetes.io/hostname: grafana.lab
spec:
  loadBalancerIP: 192.168.89.101
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: grafana
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-prometheus-ext
  labels:
       role: monitor
  namespace: prometheus-stack
  annotations:
    external-dns.alpha.kubernetes.io/hostname: prometheus.lab
spec:
  loadBalancerIP: 192.168.89.102
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: prometheus
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9090

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-alertmanager-ext
  labels:
       role: monitor
  namespace: prometheus-stack
  annotations:
    external-dns.alpha.kubernetes.io/hostname: alertmanager.lab
spec:
  loadBalancerIP: 192.168.89.103
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: alertmanager
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9093

---
